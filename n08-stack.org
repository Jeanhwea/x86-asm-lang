#+TITLE: 栈
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2024-12-16 Mon>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil

* 栈
1. esp 指向栈的顶端
2. ebp 指向栈的基地址
3. push 操作时, esp = esp - 4, ebp 不变 (32b)
4. pop 操作时,  esp = esp + 4, ebp 不变

* 什么是调用约定
函数的调用过程中有两个参与者，调用者 caller 以及被调用者 callee。

调用约定规定了 caller 和 callee 之间如何相互配合来实现函数调用，如下：

- 函数的参数存放在哪里。存放在寄存器还是栈，以及哪个寄存器、栈中的哪个位置？
- 函数的参数传递顺序。从左到右将参数入栈，还是从右到左将参数入栈？
- 返回值如何传递给 caller。是放在寄存器，还是其他地方？
- 等等

* caller 保存的寄存器以及 callee 保存的寄存器
在调用约定的规定中：

1. 有些寄存器由调用者保存（caller-saved register)，此类寄存器也叫易失性寄存器
   （volatile register）
   - 调用者调用其他函数时，某些寄存器值会被被调用者改变，但是 callee 并不负责这
     些寄存器的保存和恢复，由于需要在函数返回后继续使用
   - 故需要 caller 保存这些寄存器值，通常是压入栈中，函数调用返回后再恢复这些寄
     存器的值
2. 有些寄存器由被调用者保存（callee-save register），此类寄存器也叫非易失性寄存
   器（non-volatile register）
   - 同上，有些寄存器由 callee 保存，确保 callee 调用前后这些寄存器的值不变，通
     常是压入栈中

* 有哪些调用约定
不同架构和操作系统，调用约定可能不同，常见的调用约定如下：

- cdecl (C declaration): 32 位平台常见的一种约定，GCC、Clang、VS 编译器均默认采
  用该约定。
- stdcall: 32 位 windows 上的一种约定。
- Microsoft x64: 微软提出的基于 x86_64 架构的 windows 系统上一种调用约定。
- System V AMD64: 基于 x86_64 架构 Linux 系统上广泛使用的一种调用约定。
